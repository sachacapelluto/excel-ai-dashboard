# main.py - Excel AI Dashboard avec CSV et g√©n√©ration directe
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.colors
import numpy as np
from datetime import datetime, timedelta
import random

# Configuration page
st.set_page_config(
    page_title="Excel AI Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialisation session state
if 'processed_data' not in st.session_state:
    st.session_state.processed_data = None
if 'upload_count' not in st.session_state:
    st.session_state.upload_count = 0
if 'data_source' not in st.session_state:
    st.session_state.data_source = None

# Header
st.title("üìä Excel AI Dashboard")
st.markdown("**Transform your data into AI-powered insights in seconds**")
st.markdown("---")

# Sidebar info
with st.sidebar:
    st.markdown("### üöÄ Features")
    st.markdown("‚úÖ Excel & CSV Upload")
    st.markdown("‚úÖ Sample Data Generator") 
    st.markdown("‚úÖ Auto Data Analysis") 
    st.markdown("‚úÖ Smart Visualizations")
    st.markdown("üîÑ AI Chat (Coming Soon)")
    st.markdown("üß† Memory System (Coming Soon)")
    
    st.markdown("---")
    st.markdown("### üìä Stats")
    st.metric("Files Processed", st.session_state.upload_count)
    
    if st.session_state.processed_data is not None:
        st.markdown("### üìÅ Current Data")
        st.info(f"Source: {st.session_state.data_source}")
        st.metric("Rows", len(st.session_state.processed_data))
        st.metric("Columns", len(st.session_state.processed_data.columns))

def generate_ecommerce_data():
    """G√©n√®re donn√©es e-commerce"""
    dates = [datetime.now() - timedelta(days=x) for x in range(90)]
    data = {
        'date': dates,
        'sales': [random.randint(1000, 5000) for _ in range(90)],
        'visitors': [random.randint(500, 2000) for _ in range(90)], 
        'conversion_rate': [round(random.uniform(0.02, 0.08), 4) for _ in range(90)],
        'product_category': [random.choice(['Electronics', 'Clothing', 'Books', 'Home']) for _ in range(90)],
        'marketing_spend': [random.randint(200, 800) for _ in range(90)],
        'orders': [random.randint(50, 200) for _ in range(90)],
        'avg_order_value': [round(random.uniform(25.0, 150.0), 2) for _ in range(90)]
    }
    return pd.DataFrame(data)

def generate_healthcare_data():
    """G√©n√®re donn√©es healthcare"""
    dates = [datetime.now() - timedelta(days=x) for x in range(60)]
    data = {
        'date': dates,
        'patients_seen': [random.randint(20, 80) for _ in range(60)],
        'avg_wait_time': [random.randint(15, 45) for _ in range(60)],
        'satisfaction_score': [round(random.uniform(3.5, 5.0), 2) for _ in range(60)],
        'department': [random.choice(['Emergency', 'Cardiology', 'Pediatrics', 'Surgery']) for _ in range(60)],
        'staff_on_duty': [random.randint(5, 15) for _ in range(60)],
        'revenue': [random.randint(5000, 25000) for _ in range(60)],
        'readmission_rate': [round(random.uniform(0.05, 0.20), 3) for _ in range(60)]
    }
    return pd.DataFrame(data)




def create_custom_chart(df, chart_type, x_col, y_col, color_col=None, size_col=None, title="", 
                       chart_color="#1f77b4", x_label=None, y_label=None, axis_color="#000000"):
    """Version avec personnalisation axes et couleurs"""
    try:
        # Couleur par d√©faut
        color_sequence = [chart_color]
        
        if chart_type == "Line Chart":
            fig = px.line(df, x=x_col, y=y_col, color=color_col, title=title or f"{y_col} over {x_col}")
            if not color_col:
                fig.update_traces(line_color=chart_color)
                
        elif chart_type == "Bar Chart":
            fig = px.bar(df, x=x_col, y=y_col, color=color_col, title=title or f"{y_col} by {x_col}")
            if not color_col:
                fig.update_traces(marker_color=chart_color)
                
        elif chart_type == "Scatter Plot":
            fig = px.scatter(df, x=x_col, y=y_col, color=color_col, size=size_col, 
                           title=title or f"{y_col} vs {x_col}")
            if not color_col:
                fig.update_traces(marker_color=chart_color)
                
        elif chart_type == "Histogram":
            fig = px.histogram(df, x=x_col, color=color_col, title=title or f"Distribution of {x_col}")
            if not color_col:
                fig.update_traces(marker_color=chart_color)
                
        elif chart_type == "Box Plot":
            fig = px.box(df, x=x_col, y=y_col, color=color_col, title=title or f"{y_col} distribution by {x_col}")
            if not color_col:
                fig.update_traces(marker_color=chart_color)
                
        elif chart_type == "Pie Chart":
            if y_col:
                pie_data = df.groupby(x_col)[y_col].sum().reset_index()
                fig = px.pie(pie_data, values=y_col, names=x_col, title=title or f"{y_col} by {x_col}")
            else:
                value_counts = df[x_col].value_counts().reset_index()
                fig = px.pie(value_counts, values='count', names=x_col, title=title or f"Distribution of {x_col}")
                
        elif chart_type == "Heatmap":
            if df[x_col].dtype in ['object'] and df[y_col].dtype in ['object']:
                heatmap_data = pd.crosstab(df[x_col], df[y_col])
            else:
                heatmap_data = df.pivot_table(values=color_col if color_col else df.columns[0], 
                                            index=x_col, columns=y_col, aggfunc='mean')
            
            fig = px.imshow(heatmap_data, title=title or f"Heatmap: {x_col} vs {y_col}")
            
        elif chart_type == "Area Chart":
            fig = px.area(df, x=x_col, y=y_col, color=color_col, title=title or f"{y_col} area over {x_col}")
            if not color_col:
                fig.update_traces(fill='tonexty', fillcolor=chart_color, line_color=chart_color)
                
        elif chart_type == "Violin Plot":
            fig = px.violin(df, x=x_col, y=y_col, color=color_col, title=title or f"{y_col} distribution by {x_col}")
            if not color_col:
                fig.update_traces(marker_color=chart_color)
                
        else:
            return None
        
        # PERSONNALISATION AXES ET COULEURS
        fig.update_layout(
            height=500, 
            showlegend=True,
            # Labels personnalis√©s
            xaxis_title=x_label or x_col,
            yaxis_title=y_label or y_col,
            # Couleurs axes
            xaxis=dict(
                title_font_color=axis_color,
                tickfont_color=axis_color
            ),
            yaxis=dict(
                title_font_color=axis_color,
                tickfont_color=axis_color
            ),
            # Couleur titre
            title_font_color=axis_color
        )
        
        # Cas sp√©cial pour Pie Chart (pas d'axes)
        if chart_type == "Pie Chart":
            fig.update_layout(
                title_font_color=axis_color,
                font_color=axis_color
            )
            
        return fig
        
    except Exception as e:
        st.error(f"‚ùå Erreur cr√©ation graphique: {str(e)}")
        return None

def display_chart_builder(df):
    """Interface avec personnalisation axes et couleurs"""
    st.subheader("üé® Custom Chart Builder")
    st.markdown("**Create your personalized visualizations:**")
    
    # S√©parer colonnes par type
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    datetime_cols = []
    
    for col in df.columns:
        if df[col].dtype == 'datetime64[ns]' or 'date' in col.lower():
            datetime_cols.append(col)
    
    all_cols = df.columns.tolist()
    
    # Interface en 2 colonnes
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üìä Chart Configuration**")
        chart_type = st.selectbox(
            "Chart Type",
            ["Line Chart", "Bar Chart", "Scatter Plot", "Histogram", 
             "Box Plot", "Pie Chart", "Heatmap", "Area Chart", "Violin Plot"],
            help="Choose the type of visualization"
        )
        
        # S√©lection intelligente selon le type
        if chart_type in ["Line Chart", "Area Chart"]:
            x_col = st.selectbox("X-Axis Data", datetime_cols + categorical_cols + numeric_cols, 
                               help="Usually time/dates for trends")
        elif chart_type == "Histogram":
            x_col = st.selectbox("Column to Analyze", numeric_cols + categorical_cols,
                               help="Column to show distribution")
        elif chart_type == "Pie Chart":
            x_col = st.selectbox("Categories", categorical_cols,
                               help="Categories for pie slices")
        else:
            x_col = st.selectbox("X-Axis Data", all_cols)
    
    with col2:
        st.markdown("**üìä Data Configuration**")
        # Y-axis selon type de graphique
        if chart_type in ["Histogram", "Pie Chart"]:
            y_col = st.selectbox("Values (optional)", [None] + numeric_cols,
                               help="Leave empty to count occurrences")
        elif chart_type in ["Box Plot", "Violin Plot"]:
            y_col = st.selectbox("Y-Axis Values", numeric_cols,
                               help="Numeric values to analyze")
        elif chart_type == "Heatmap":
            y_col = st.selectbox("Y-Axis Data", all_cols,
                               help="Second dimension")
        else:
            y_col = st.selectbox("Y-Axis Data", numeric_cols + [None])
    
    # SECTION AVANC√âE AM√âLIOR√âE
    with st.expander("üé® Advanced Styling & Data Options"):
        
        # DATA OPTIONS
        st.markdown("**üìä Data Visualization**")
        col1, col2 = st.columns(2)
        
        with col1:
            color_col = st.selectbox(
                "Color By", 
                [None] + categorical_cols + numeric_cols,
                help="üéØ Color data points by category/value. Example: Color sales bars by 'product_category' to see which category performs best"
            )
            
            # Explication Color By
            if color_col:
                unique_values = df[color_col].nunique()
                st.info(f"‚ÑπÔ∏è Will create {unique_values} different colors for each unique value in '{color_col}'")
        
        with col2:
            if chart_type == "Scatter Plot":
                size_col = st.selectbox(
                    "Size By", 
                    [None] + numeric_cols,
                    help="Size points by values (bubble chart effect)"
                )
            else:
                size_col = None
        
        st.markdown("---")
        
        # STYLE OPTIONS
        st.markdown("**üé® Visual Styling**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            chart_color = st.color_picker(
                "Chart Color", 
                value="#1f77b4", 
                help="Main color for your chart (only applies when 'Color By' is empty)"
            )
        
        with col2:
            axis_color = st.color_picker(
                "Text & Axes Color", 
                value="#000000", 
                help="Color for titles, labels, and axis text"
            )
        
        with col3:
            st.markdown("**Color Preview**")
            st.markdown(f'<div style="background: linear-gradient(45deg, {chart_color}, {axis_color}); height: 30px; border-radius: 5px; border: 1px solid #ddd;"></div>', 
                       unsafe_allow_html=True)
        
        st.markdown("---")
        
        # LABELS OPTIONS
        st.markdown("**üìù Custom Labels**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            x_label = st.text_input(
                "X-Axis Label", 
                value="", 
                placeholder=f"Default: {x_col}" if x_col else "Auto",
                help="Custom name for X-axis"
            )
        
        with col2:
            if chart_type not in ["Pie Chart", "Histogram"]:
                y_label = st.text_input(
                    "Y-Axis Label", 
                    value="", 
                    placeholder=f"Default: {y_col}" if y_col else "Auto",
                    help="Custom name for Y-axis"
                )
            else:
                y_label = None
        
        with col3:
            custom_title = st.text_input(
                "Chart Title", 
                value="", 
                placeholder="Auto-generated title",
                help="Custom title for your chart"
            )
    
    # SECTION AIDE COLOR BY
    if not color_col:
        st.info("üí° **Tip:** Use 'Color By' to add a data dimension! Example: Color sales by product category to see which products perform best.")
    
    # Bouton cr√©ation avec style
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        create_button = st.button(
            "üé® Create Custom Chart", 
            type="primary", 
            use_container_width=True
        )
    
    if create_button:
        if x_col and (y_col or chart_type in ["Histogram", "Pie Chart"]):
            with st.spinner("üé® Creating your personalized chart..."):
                fig = create_custom_chart(
                    df, chart_type, x_col, y_col, color_col, size_col, 
                    custom_title, chart_color, x_label, y_label, axis_color
                )
                
            if fig:
                st.plotly_chart(fig, use_container_width=True, key=f"chart_builder_{len(st.session_state.get('custom_charts', []))}")
                
                # Sauvegarder avec nouvelles options
                if 'custom_charts' not in st.session_state:
                    st.session_state.custom_charts = []
                
                chart_config = {
                    'type': chart_type,
                    'x_col': x_col,
                    'y_col': y_col,
                    'color_col': color_col,
                    'size_col': size_col,
                    'title': custom_title or f"{chart_type}: {y_col or x_col} by {x_col}",
                    'chart_color': chart_color,
                    'axis_color': axis_color,
                    'x_label': x_label,
                    'y_label': y_label,
                    'timestamp': datetime.now().strftime("%H:%M:%S")
                }
                st.session_state.custom_charts.append(chart_config)
                
                # Message personnalis√©
                color_info = f" with {color_col} coloring" if color_col else f" in {chart_color}"
                st.success(f"‚úÖ {chart_type} created{color_info}!")
        else:
            st.warning("‚ö†Ô∏è Please select required columns for this chart type")


def display_chart_gallery(df):
    """Gallery avec support des nouvelles options"""
    if 'custom_charts' in st.session_state and st.session_state.custom_charts:
        st.subheader("üñºÔ∏è Your Chart Gallery")
        st.markdown(f"**{len(st.session_state.custom_charts)} custom charts created**")
        
        # Options de galerie
        col1, col2 = st.columns([3, 1])
        with col1:
            view_mode = st.radio("View Mode", ["Grid View", "List View"], horizontal=True)
        with col2:
            if st.button("üóëÔ∏è Clear Gallery"):
                st.session_state.custom_charts = []
                st.rerun()
        
        if view_mode == "Grid View":
            # Affichage en grille
            cols = st.columns(2)
            for i, chart_config in enumerate(st.session_state.custom_charts[-6:]):
                with cols[i % 2]:
                    with st.container():
                        st.markdown(f"**{chart_config['title']}**")
                        
                        # Info styling
                        style_info = []
                        if chart_config.get('color_col'):
                            style_info.append(f"Colored by {chart_config['color_col']}")
                        else:
                            style_info.append(f"Color: {chart_config.get('chart_color', '#1f77b4')}")
                        
                        st.caption(" | ".join(style_info) + f" | {chart_config['timestamp']}")
                        
                        # Recr√©er avec toutes les options
                        fig = create_custom_chart(
                            df, chart_config['type'], chart_config['x_col'], 
                            chart_config['y_col'], chart_config['color_col'], 
                            chart_config['size_col'], chart_config['title'],
                            chart_config.get('chart_color', '#1f77b4'),
                            chart_config.get('x_label'), chart_config.get('y_label'),
                            chart_config.get('axis_color', '#000000')
                        )
                        if fig:
                            fig.update_layout(height=300)
                            st.plotly_chart(fig, use_container_width=True, key=f"gallery_grid_{i}_{chart_config['timestamp']}")
        
        else:
            # Affichage en liste d√©taill√©e
            for i, chart_config in enumerate(reversed(st.session_state.custom_charts)):
                with st.expander(f"üìä {chart_config['title']} - {chart_config['timestamp']}"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        # D√©tails configuration
                        st.markdown(f"**Type:** {chart_config['type']}")
                        st.markdown(f"**X-Axis:** {chart_config['x_col']} ‚Üí *{chart_config.get('x_label', 'Auto label')}*")
                        if chart_config['y_col']:
                            st.markdown(f"**Y-Axis:** {chart_config['y_col']} ‚Üí *{chart_config.get('y_label', 'Auto label')}*")
                        
                        # Info couleurs
                        if chart_config['color_col']:
                            st.markdown(f"**üé® Color By:** {chart_config['color_col']}")
                        else:
                            chart_color = chart_config.get('chart_color', '#1f77b4')
                            st.markdown(f"**üé® Chart Color:** {chart_color}")
                            st.markdown(f'<div style="background-color: {chart_color}; height: 20px; width: 100px; border-radius: 3px; border: 1px solid #ddd; display: inline-block;"></div>', 
                                       unsafe_allow_html=True)
                        
                        axis_color = chart_config.get('axis_color', '#000000')
                        st.markdown(f"**üìù Text Color:** {axis_color}")
                    
                    with col2:
                        if st.button("üîÑ Recreate", key=f"recreate_list_{i}_{chart_config['timestamp']}"):
                            fig = create_custom_chart(
                                df, chart_config['type'], chart_config['x_col'], 
                                chart_config['y_col'], chart_config['color_col'], 
                                chart_config['size_col'], chart_config['title'],
                                chart_config.get('chart_color', '#1f77b4'),
                                chart_config.get('x_label'), chart_config.get('y_label'),
                                chart_config.get('axis_color', '#000000')
                            )
                            if fig:
                                st.plotly_chart(fig, use_container_width=True, key=f"recreated_{i}_{chart_config['timestamp']}")
    else:
        st.info("üé® Create some custom charts to see them in your gallery!")

def suggest_chart_ideas(df):
    """Sugg√®re des id√©es de graphiques selon les donn√©es"""
    st.subheader("üí° Chart Suggestions")
    st.markdown("**Based on your data, try these visualizations:**")
    
    suggestions = []
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    
    # D√©tection colonnes temporelles
    datetime_cols = []
    for col in df.columns:
        if df[col].dtype == 'datetime64[ns]' or 'date' in col.lower():
            datetime_cols.append(col)
    
    # Suggestions bas√©es sur structure des donn√©es
    if datetime_cols and numeric_cols:
        suggestions.append({
            'icon': 'üìà',
            'title': 'Time Series Analysis',
            'description': f'Show {numeric_cols[0]} trends over {datetime_cols[0]}',
            'type': 'Line Chart',
            'x': datetime_cols[0],
            'y': numeric_cols[0]
        })
    
    if len(numeric_cols) >= 2:
        suggestions.append({
            'icon': 'üîç',
            'title': 'Correlation Analysis', 
            'description': f'Explore relationship between {numeric_cols[0]} and {numeric_cols[1]}',
            'type': 'Scatter Plot',
            'x': numeric_cols[0],
            'y': numeric_cols[1]
        })
    
    if categorical_cols and numeric_cols:
        suggestions.append({
            'icon': 'üìä',
            'title': 'Category Performance',
            'description': f'Compare {numeric_cols[0]} across {categorical_cols[0]}',
            'type': 'Bar Chart',
            'x': categorical_cols[0],
            'y': numeric_cols[0]
        })
    
    if categorical_cols:
        suggestions.append({
            'icon': 'ü•ß',
            'title': 'Distribution Analysis',
            'description': f'See composition of {categorical_cols[0]}',
            'type': 'Pie Chart',
            'x': categorical_cols[0],
            'y': None
        })
    
    if len(numeric_cols) >= 3:
        suggestions.append({
            'icon': 'üå°Ô∏è',
            'title': 'Correlation Heatmap',
            'description': 'Visualize correlations between all numeric columns',
            'type': 'Heatmap',
            'x': numeric_cols[0],
            'y': numeric_cols[1]
        })
    
    # Affichage suggestions
    cols = st.columns(min(3, len(suggestions)))
    for i, suggestion in enumerate(suggestions[:3]):  # Top 3 suggestions
        with cols[i]:
            st.markdown(f"### {suggestion['icon']} {suggestion['title']}")
            st.markdown(suggestion['description'])
            
            if st.button(f"Create {suggestion['type']}", key=f"suggest_{i}"):
                fig = create_custom_chart(
                    df, suggestion['type'], suggestion['x'], suggestion['y'], 
                    title=suggestion['title']
                )
                if fig:
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Auto-save to gallery
                    if 'custom_charts' not in st.session_state:
                        st.session_state.custom_charts = []
                    
                    chart_config = {
                        'type': suggestion['type'],
                        'x_col': suggestion['x'],
                        'y_col': suggestion['y'],
                        'color_col': None,
                        'size_col': None,
                        'title': suggestion['title'],
                        'timestamp': datetime.now().strftime("%H:%M:%S")
                    }
                    st.session_state.custom_charts.append(chart_config)

def load_file_data(uploaded_file):
    """Charge donn√©es depuis fichier upload√©"""
    try:
        file_extension = uploaded_file.name.split('.')[-1].lower()
        
        if file_extension == 'csv':
            # Tentatives multiples pour CSV avec diff√©rents s√©parateurs et encodings
            try:
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            except Exception:
                try:
                    uploaded_file.seek(0)
                    df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')
                except Exception:
                    try:
                        uploaded_file.seek(0)
                        df = pd.read_csv(uploaded_file, sep='\t', encoding='utf-8')
                    except Exception:
                        uploaded_file.seek(0)
                        df = pd.read_csv(uploaded_file, encoding='latin-1')
            
            return df, f"CSV Upload: {uploaded_file.name}"
            
        elif file_extension in ['xlsx', 'xls']:
            df = pd.read_excel(uploaded_file)
            return df, f"Excel Upload: {uploaded_file.name}"
        else:
            st.error("‚ùå Format non support√©")
            return None, None
            
    except Exception as e:
        st.error(f"‚ùå Erreur lecture fichier: {str(e)}")
        return None, None

def process_data(df, source_name):
    """Traite et analyse les donn√©es"""
    st.session_state.processed_data = df
    st.session_state.data_source = source_name
    st.session_state.upload_count += 1
    
    return df



def display_data_analysis(df):
    """Affiche l'analyse compl√®te des donn√©es avec graphiques personnalis√©s"""
    
    # Success message avec info
    st.success(f"‚úÖ Data processed: **{len(df)} rows** and **{len(df.columns)} columns**")
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Rows", len(df))
    with col2:
        st.metric("Total Columns", len(df.columns))
    with col3:
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        st.metric("Numeric Columns", len(numeric_cols))
    with col4:
        missing_values = df.isnull().sum().sum()
        st.metric("Missing Values", missing_values)
    
    st.markdown("---")
    
    # Data preview
    st.subheader("2. üëÄ Data Preview")
    st.markdown("**First 10 rows:**")
    st.dataframe(df.head(10), use_container_width=True)
    
    # Column information
    st.subheader("3. üìã Column Analysis")
    
    col_info = []
    for col in df.columns:
        col_type = str(df[col].dtype)
        non_null = df[col].count()
        unique_vals = df[col].nunique()
        
        col_info.append({
            'Column': col,
            'Type': col_type,
            'Non-Null': non_null,
            'Unique Values': unique_vals,
            'Missing': len(df) - non_null
        })
    
    col_info_df = pd.DataFrame(col_info)
    st.dataframe(col_info_df, use_container_width=True)
    
    # NOUVELLE SECTION - Tabs pour visualisations
    st.markdown("---")
    st.subheader("4. üìä Data Visualizations")
    
    # Tabs pour diff√©rents types de visualisations
    tab1, tab2, tab3, tab4 = st.tabs(["ü§ñ Auto Charts", "üé® Custom Builder", "üñºÔ∏è Gallery", "üí° Suggestions"])
    
    with tab1:
        st.markdown("**Automatic visualizations based on your data:**")
        
        # Graphiques automatiques existants
        if len(numeric_cols) > 0:
            first_numeric = numeric_cols[0]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown(f"**Distribution: {first_numeric}**")
                fig1 = px.histogram(
                    df, 
                    x=first_numeric,
                    title=f"Distribution of {first_numeric}",
                    nbins=20
                )
                fig1.update_layout(height=400)
                st.plotly_chart(fig1, use_container_width=True)
            
            with col2:
                st.markdown(f"**Box Plot: {first_numeric}**")
                fig2 = px.box(
                    df,
                    y=first_numeric,
                    title=f"Box Plot of {first_numeric}"
                )
                fig2.update_layout(height=400)
                st.plotly_chart(fig2, use_container_width=True)
            
            # Matrice de corr√©lation
            if len(numeric_cols) > 1:
                st.markdown("**Correlation Matrix**")
                
                corr_matrix = df[numeric_cols].corr()
                
                fig3 = px.imshow(
                    corr_matrix,
                    title="Correlation Between Numeric Columns",
                    aspect="auto",
                    color_continuous_scale="RdBu_r"
                )
                st.plotly_chart(fig3, use_container_width=True)
                
                # Corr√©lations fortes
                strong_corr = []
                for i in range(len(corr_matrix.columns)):
                    for j in range(i+1, len(corr_matrix.columns)):
                        corr_val = corr_matrix.iloc[i, j]
                        if abs(corr_val) > 0.7:
                            strong_corr.append({
                                'Column 1': corr_matrix.columns[i],
                                'Column 2': corr_matrix.columns[j],
                                'Correlation': round(corr_val, 3)
                            })
                
                if strong_corr:
                    st.markdown("**üîç Strong Correlations Found:**")
                    st.dataframe(pd.DataFrame(strong_corr))
                else:
                    st.info("No strong correlations (>0.7) found.")
            
            # Analyse temporelle
            date_columns = []
            for col in df.columns:
                if 'date' in col.lower() or 'time' in col.lower() or df[col].dtype == 'datetime64[ns]':
                    try:
                        if df[col].dtype != 'datetime64[ns]':
                            pd.to_datetime(df[col])
                        date_columns.append(col)
                    except:
                        pass
            
            if date_columns and len(numeric_cols) > 0:
                st.markdown("**üìÖ Time Series Analysis**")
                date_col = date_columns[0]
                
                df_time = df.copy()
                if df_time[date_col].dtype != 'datetime64[ns]':
                    df_time[date_col] = pd.to_datetime(df_time[date_col])
                
                # Agr√©gation par date
                time_series = df_time.groupby(df_time[date_col].dt.date)[first_numeric].sum().reset_index()
                
                fig4 = px.line(
                    time_series,
                    x=date_col,
                    y=first_numeric,
                    title=f"Time Series: {first_numeric} over {date_col}"
                )
                st.plotly_chart(fig4, use_container_width=True)
        else:
            st.info("No numeric columns found for automatic visualizations.")
    
    with tab2:
        # Interface de construction de graphiques personnalis√©s
        display_chart_builder(df)
    
    with tab3:
        # Galerie des graphiques cr√©√©s
        display_chart_gallery(df)
    
    with tab4:
        # Suggestions de graphiques
        suggest_chart_ideas(df)
    
    # Insights intelligents (reste identique)
    st.markdown("---")
    st.subheader("5. üß† Smart Insights")
    
    insights = []
    
    # Compl√©tude des donn√©es
    completeness = (1 - df.isnull().sum().sum() / (len(df) * len(df.columns))) * 100
    insights.append(f"üìä Data is **{completeness:.1f}% complete** - {'Excellent!' if completeness > 95 else 'Good!' if completeness > 80 else 'Consider cleaning missing values'}")
    
    # Analyse colonnes num√©riques
    if len(numeric_cols) > 0:
        high_variance_cols = []
        for col in numeric_cols:
            cv = df[col].std() / df[col].mean() if df[col].mean() != 0 else 0
            if cv > 1:
                high_variance_cols.append(col)
        
        if high_variance_cols:
            insights.append(f"üìà High variability in: **{', '.join(high_variance_cols)}** - Great for analysis!")
    
    # Analyse cat√©gorielle
    categorical_cols = df.select_dtypes(include=['object']).columns
    if len(categorical_cols) > 0:
        high_cardinality = []
        for col in categorical_cols:
            if df[col].nunique() > len(df) * 0.8:
                high_cardinality.append(col)
        
        if high_cardinality:
            insights.append(f"üè∑Ô∏è High cardinality in: **{', '.join(high_cardinality)}** - Consider grouping")
    
    # Potentiel temporel
    date_columns = []
    for col in df.columns:
        if 'date' in col.lower() or 'time' in col.lower() or df[col].dtype == 'datetime64[ns]':
            date_columns.append(col)
    
    if date_columns:
        insights.append(f"üìÖ Time series potential with **{date_columns[0]}** - Perfect for trend analysis!")
    
    # Affichage insights
    for insight in insights:
        st.markdown(f"- {insight}")
    
    # Next steps (reste identique)
    st.markdown("---")
    st.subheader("6. üöÄ Next Steps")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**ü§ñ AI Chat**")
        st.info("Ask questions about your data")
        st.button("Coming Next!", disabled=True, key="chat_btn")
    
    with col2:
        st.markdown("**üß† Memory System**") 
        st.info("System remembers analyses")
        st.button("Coming Next!", disabled=True, key="memory_btn")
    
    with col3:
        st.markdown("**üìÑ Export Report**")
        st.info("Generate PDF reports")
        st.button("Coming Next!", disabled=True, key="export_btn")


# Interface principale
st.subheader("1. üìÅ Get Your Data")

# Tabs pour organiser les options
tab1, tab2 = st.tabs(["üìÅ Upload File", "üéØ Generate Sample Data"])

with tab1:
    st.markdown("**Upload your Excel or CSV file:**")
    uploaded_file = st.file_uploader(
        "Choose a data file",
        type=['xlsx', 'xls', 'csv'],
        help="Supported formats: Excel (.xlsx, .xls) and CSV (.csv)"
    )
    
    if uploaded_file is not None:
        with st.spinner("üìä Processing your file..."):
            df, source_name = load_file_data(uploaded_file)
            
        if df is not None:
            df = process_data(df, source_name)

with tab2:
    st.markdown("**Generate sample data for testing:**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üõçÔ∏è Generate E-commerce Data", use_container_width=True):
            with st.spinner("Generating e-commerce data..."):
                df = generate_ecommerce_data()
                df = process_data(df, "Generated E-commerce Dataset (90 days)")
            st.success("‚úÖ E-commerce data generated and loaded!")
    
    with col2:
        if st.button("üè• Generate Healthcare Data", use_container_width=True):
            with st.spinner("Generating healthcare data..."):
                df = generate_healthcare_data()
                df = process_data(df, "Generated Healthcare Dataset (60 days)")
            st.success("‚úÖ Healthcare data generated and loaded!")
    
    st.markdown("---")
    st.markdown("üí° **Tip:** Click either button above to instantly generate and analyze sample data!")

# Affichage de l'analyse si donn√©es disponibles
if st.session_state.processed_data is not None:
    st.markdown("---")
    display_data_analysis(st.session_state.processed_data)
    
    # Option de t√©l√©chargement des donn√©es g√©n√©r√©es
    if "Generated" in st.session_state.data_source:
        st.markdown("---")
        st.subheader("üì• Download Generated Data")
        
        # CSV download
        csv = st.session_state.processed_data.to_csv(index=False)
        filename = "sample_ecommerce_data.csv" if "E-commerce" in st.session_state.data_source else "sample_healthcare_data.csv"
        
        st.download_button(
            label="üì• Download as CSV",
            data=csv,
            file_name=filename,
            mime='text/csv',
            use_container_width=True
        )

else:
    # Instructions quand pas de donn√©es
    st.info("üëÜ Upload a file or generate sample data to get started!")
    
    st.markdown("---")
    st.markdown("### üöÄ Quick Start Guide:")
    st.markdown("1. **Option A:** Upload your own Excel/CSV file using the 'Upload File' tab")
    st.markdown("2. **Option B:** Generate sample data using the 'Generate Sample Data' tab")
    st.markdown("3. **Explore:** View automatic analysis, insights, and visualizations")
    st.markdown("4. **Next:** Tomorrow we add AI chat to query your data!")

# Clear data option
if st.session_state.processed_data is not None:
    st.markdown("---")
    if st.button("üóëÔ∏è Clear Current Data"):
        st.session_state.processed_data = None
        st.session_state.data_source = None
        st.rerun()

# Footer
st.markdown("---")
st.markdown("**Excel AI Dashboard v1.1** - Transform your data into insights ‚ö°")
st.markdown("*Support: Excel (.xlsx, .xls), CSV (.csv) | Sample data generators included*")